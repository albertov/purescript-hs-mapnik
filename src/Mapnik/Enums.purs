-- File auto generated by purescript-bridge! --
module Mapnik.Enums where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))

import Prelude
import Data.Generic.Rep (class Generic)
import Data.Foreign.Class (class Decode, class Encode, decode, encode)
import Data.Foreign.Generic (defaultOptions, genericEncode, genericDecode)
import Data.Foreign.Generic.Types (Options, SumEncoding(..))
import Data.Foreign.Generic.Class (class GenericDecode, class GenericEncode)
import Data.Generic.Rep.Eq as GEq
import Data.Generic.Rep.Show as GShow

jOpts = defaultOptions { sumEncoding = ObjectWithSingleField, unwrapSingleConstructors = true}
data CompositeMode =
    Clear
  | Src
  | Dst
  | SrcOver
  | DstOver
  | SrcIn
  | DstIn
  | SrcOut
  | DstOut
  | SrcAtop
  | DstAtop
  | Xor
  | Plus
  | Minus
  | Multiply
  | Screen
  | Overlay
  | Darken
  | Lighten
  | ColorDodge
  | ColorBurn
  | HardLight
  | SoftLight
  | Difference
  | Exclusion
  | Contrast
  | InvertOp
  | InvertRgb
  | GrainMerge
  | GrainExtract
  | Hue
  | Saturation
  | Color
  | Value
  | LinearDodge
  | LinearBurn
  | Divide

derive instance genericCompositeMode :: Generic CompositeMode _

instance encodeCompositeMode :: Encode CompositeMode where encode = genericEncode jOpts

instance decodeCompositeMode :: Decode CompositeMode where decode = genericDecode jOpts

instance showCompositeMode :: Show CompositeMode where show = GShow.genericShow

instance eqCompositeMode :: Eq CompositeMode where eq = GEq.genericEq


--------------------------------------------------------------------------------
_Clear :: Prism' CompositeMode Unit
_Clear = prism' (\_ -> Clear) f
  where
    f Clear = Just unit
    f _ = Nothing

_Src :: Prism' CompositeMode Unit
_Src = prism' (\_ -> Src) f
  where
    f Src = Just unit
    f _ = Nothing

_Dst :: Prism' CompositeMode Unit
_Dst = prism' (\_ -> Dst) f
  where
    f Dst = Just unit
    f _ = Nothing

_SrcOver :: Prism' CompositeMode Unit
_SrcOver = prism' (\_ -> SrcOver) f
  where
    f SrcOver = Just unit
    f _ = Nothing

_DstOver :: Prism' CompositeMode Unit
_DstOver = prism' (\_ -> DstOver) f
  where
    f DstOver = Just unit
    f _ = Nothing

_SrcIn :: Prism' CompositeMode Unit
_SrcIn = prism' (\_ -> SrcIn) f
  where
    f SrcIn = Just unit
    f _ = Nothing

_DstIn :: Prism' CompositeMode Unit
_DstIn = prism' (\_ -> DstIn) f
  where
    f DstIn = Just unit
    f _ = Nothing

_SrcOut :: Prism' CompositeMode Unit
_SrcOut = prism' (\_ -> SrcOut) f
  where
    f SrcOut = Just unit
    f _ = Nothing

_DstOut :: Prism' CompositeMode Unit
_DstOut = prism' (\_ -> DstOut) f
  where
    f DstOut = Just unit
    f _ = Nothing

_SrcAtop :: Prism' CompositeMode Unit
_SrcAtop = prism' (\_ -> SrcAtop) f
  where
    f SrcAtop = Just unit
    f _ = Nothing

_DstAtop :: Prism' CompositeMode Unit
_DstAtop = prism' (\_ -> DstAtop) f
  where
    f DstAtop = Just unit
    f _ = Nothing

_Xor :: Prism' CompositeMode Unit
_Xor = prism' (\_ -> Xor) f
  where
    f Xor = Just unit
    f _ = Nothing

_Plus :: Prism' CompositeMode Unit
_Plus = prism' (\_ -> Plus) f
  where
    f Plus = Just unit
    f _ = Nothing

_Minus :: Prism' CompositeMode Unit
_Minus = prism' (\_ -> Minus) f
  where
    f Minus = Just unit
    f _ = Nothing

_Multiply :: Prism' CompositeMode Unit
_Multiply = prism' (\_ -> Multiply) f
  where
    f Multiply = Just unit
    f _ = Nothing

_Screen :: Prism' CompositeMode Unit
_Screen = prism' (\_ -> Screen) f
  where
    f Screen = Just unit
    f _ = Nothing

_Overlay :: Prism' CompositeMode Unit
_Overlay = prism' (\_ -> Overlay) f
  where
    f Overlay = Just unit
    f _ = Nothing

_Darken :: Prism' CompositeMode Unit
_Darken = prism' (\_ -> Darken) f
  where
    f Darken = Just unit
    f _ = Nothing

_Lighten :: Prism' CompositeMode Unit
_Lighten = prism' (\_ -> Lighten) f
  where
    f Lighten = Just unit
    f _ = Nothing

_ColorDodge :: Prism' CompositeMode Unit
_ColorDodge = prism' (\_ -> ColorDodge) f
  where
    f ColorDodge = Just unit
    f _ = Nothing

_ColorBurn :: Prism' CompositeMode Unit
_ColorBurn = prism' (\_ -> ColorBurn) f
  where
    f ColorBurn = Just unit
    f _ = Nothing

_HardLight :: Prism' CompositeMode Unit
_HardLight = prism' (\_ -> HardLight) f
  where
    f HardLight = Just unit
    f _ = Nothing

_SoftLight :: Prism' CompositeMode Unit
_SoftLight = prism' (\_ -> SoftLight) f
  where
    f SoftLight = Just unit
    f _ = Nothing

_Difference :: Prism' CompositeMode Unit
_Difference = prism' (\_ -> Difference) f
  where
    f Difference = Just unit
    f _ = Nothing

_Exclusion :: Prism' CompositeMode Unit
_Exclusion = prism' (\_ -> Exclusion) f
  where
    f Exclusion = Just unit
    f _ = Nothing

_Contrast :: Prism' CompositeMode Unit
_Contrast = prism' (\_ -> Contrast) f
  where
    f Contrast = Just unit
    f _ = Nothing

_InvertOp :: Prism' CompositeMode Unit
_InvertOp = prism' (\_ -> InvertOp) f
  where
    f InvertOp = Just unit
    f _ = Nothing

_InvertRgb :: Prism' CompositeMode Unit
_InvertRgb = prism' (\_ -> InvertRgb) f
  where
    f InvertRgb = Just unit
    f _ = Nothing

_GrainMerge :: Prism' CompositeMode Unit
_GrainMerge = prism' (\_ -> GrainMerge) f
  where
    f GrainMerge = Just unit
    f _ = Nothing

_GrainExtract :: Prism' CompositeMode Unit
_GrainExtract = prism' (\_ -> GrainExtract) f
  where
    f GrainExtract = Just unit
    f _ = Nothing

_Hue :: Prism' CompositeMode Unit
_Hue = prism' (\_ -> Hue) f
  where
    f Hue = Just unit
    f _ = Nothing

_Saturation :: Prism' CompositeMode Unit
_Saturation = prism' (\_ -> Saturation) f
  where
    f Saturation = Just unit
    f _ = Nothing

_Color :: Prism' CompositeMode Unit
_Color = prism' (\_ -> Color) f
  where
    f Color = Just unit
    f _ = Nothing

_Value :: Prism' CompositeMode Unit
_Value = prism' (\_ -> Value) f
  where
    f Value = Just unit
    f _ = Nothing

_LinearDodge :: Prism' CompositeMode Unit
_LinearDodge = prism' (\_ -> LinearDodge) f
  where
    f LinearDodge = Just unit
    f _ = Nothing

_LinearBurn :: Prism' CompositeMode Unit
_LinearBurn = prism' (\_ -> LinearBurn) f
  where
    f LinearBurn = Just unit
    f _ = Nothing

_Divide :: Prism' CompositeMode Unit
_Divide = prism' (\_ -> Divide) f
  where
    f Divide = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data AspectFixMode =
    GrowBox
  | GrowCanvas
  | ShrinkBox
  | ShrinkCanvas
  | AdjustBoxWidth
  | AdjustBoxHeight
  | AdjustCanvasWidth
  | AdjustCanvasHeight
  | Respect

derive instance genericAspectFixMode :: Generic AspectFixMode _

instance encodeAspectFixMode :: Encode AspectFixMode where encode = genericEncode jOpts

instance decodeAspectFixMode :: Decode AspectFixMode where decode = genericDecode jOpts

instance showAspectFixMode :: Show AspectFixMode where show = GShow.genericShow

instance eqAspectFixMode :: Eq AspectFixMode where eq = GEq.genericEq


--------------------------------------------------------------------------------
_GrowBox :: Prism' AspectFixMode Unit
_GrowBox = prism' (\_ -> GrowBox) f
  where
    f GrowBox = Just unit
    f _ = Nothing

_GrowCanvas :: Prism' AspectFixMode Unit
_GrowCanvas = prism' (\_ -> GrowCanvas) f
  where
    f GrowCanvas = Just unit
    f _ = Nothing

_ShrinkBox :: Prism' AspectFixMode Unit
_ShrinkBox = prism' (\_ -> ShrinkBox) f
  where
    f ShrinkBox = Just unit
    f _ = Nothing

_ShrinkCanvas :: Prism' AspectFixMode Unit
_ShrinkCanvas = prism' (\_ -> ShrinkCanvas) f
  where
    f ShrinkCanvas = Just unit
    f _ = Nothing

_AdjustBoxWidth :: Prism' AspectFixMode Unit
_AdjustBoxWidth = prism' (\_ -> AdjustBoxWidth) f
  where
    f AdjustBoxWidth = Just unit
    f _ = Nothing

_AdjustBoxHeight :: Prism' AspectFixMode Unit
_AdjustBoxHeight = prism' (\_ -> AdjustBoxHeight) f
  where
    f AdjustBoxHeight = Just unit
    f _ = Nothing

_AdjustCanvasWidth :: Prism' AspectFixMode Unit
_AdjustCanvasWidth = prism' (\_ -> AdjustCanvasWidth) f
  where
    f AdjustCanvasWidth = Just unit
    f _ = Nothing

_AdjustCanvasHeight :: Prism' AspectFixMode Unit
_AdjustCanvasHeight = prism' (\_ -> AdjustCanvasHeight) f
  where
    f AdjustCanvasHeight = Just unit
    f _ = Nothing

_Respect :: Prism' AspectFixMode Unit
_Respect = prism' (\_ -> Respect) f
  where
    f Respect = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data LineCap =
    ButtCap
  | SquareCap
  | RoundCap

derive instance genericLineCap :: Generic LineCap _

instance encodeLineCap :: Encode LineCap where encode = genericEncode jOpts

instance decodeLineCap :: Decode LineCap where decode = genericDecode jOpts

instance showLineCap :: Show LineCap where show = GShow.genericShow

instance eqLineCap :: Eq LineCap where eq = GEq.genericEq


--------------------------------------------------------------------------------
_ButtCap :: Prism' LineCap Unit
_ButtCap = prism' (\_ -> ButtCap) f
  where
    f ButtCap = Just unit
    f _ = Nothing

_SquareCap :: Prism' LineCap Unit
_SquareCap = prism' (\_ -> SquareCap) f
  where
    f SquareCap = Just unit
    f _ = Nothing

_RoundCap :: Prism' LineCap Unit
_RoundCap = prism' (\_ -> RoundCap) f
  where
    f RoundCap = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data LineJoin =
    MiterJoin
  | MiterRevertJoin
  | RoundJoin
  | BevelJoin

derive instance genericLineJoin :: Generic LineJoin _

instance encodeLineJoin :: Encode LineJoin where encode = genericEncode jOpts

instance decodeLineJoin :: Decode LineJoin where decode = genericDecode jOpts

instance showLineJoin :: Show LineJoin where show = GShow.genericShow

instance eqLineJoin :: Eq LineJoin where eq = GEq.genericEq


--------------------------------------------------------------------------------
_MiterJoin :: Prism' LineJoin Unit
_MiterJoin = prism' (\_ -> MiterJoin) f
  where
    f MiterJoin = Just unit
    f _ = Nothing

_MiterRevertJoin :: Prism' LineJoin Unit
_MiterRevertJoin = prism' (\_ -> MiterRevertJoin) f
  where
    f MiterRevertJoin = Just unit
    f _ = Nothing

_RoundJoin :: Prism' LineJoin Unit
_RoundJoin = prism' (\_ -> RoundJoin) f
  where
    f RoundJoin = Just unit
    f _ = Nothing

_BevelJoin :: Prism' LineJoin Unit
_BevelJoin = prism' (\_ -> BevelJoin) f
  where
    f BevelJoin = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data LineRasterizer =
    RasterizerFull
  | RasterizerFast

derive instance genericLineRasterizer :: Generic LineRasterizer _

instance encodeLineRasterizer :: Encode LineRasterizer where encode = genericEncode jOpts

instance decodeLineRasterizer :: Decode LineRasterizer where decode = genericDecode jOpts

instance showLineRasterizer :: Show LineRasterizer where show = GShow.genericShow

instance eqLineRasterizer :: Eq LineRasterizer where eq = GEq.genericEq


--------------------------------------------------------------------------------
_RasterizerFull :: Prism' LineRasterizer Unit
_RasterizerFull = prism' (\_ -> RasterizerFull) f
  where
    f RasterizerFull = Just unit
    f _ = Nothing

_RasterizerFast :: Prism' LineRasterizer Unit
_RasterizerFast = prism' (\_ -> RasterizerFast) f
  where
    f RasterizerFast = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data HaloRasterizer =
    HaloRasterizerFull
  | HaloRasterizerFast

derive instance genericHaloRasterizer :: Generic HaloRasterizer _

instance encodeHaloRasterizer :: Encode HaloRasterizer where encode = genericEncode jOpts

instance decodeHaloRasterizer :: Decode HaloRasterizer where decode = genericDecode jOpts

instance showHaloRasterizer :: Show HaloRasterizer where show = GShow.genericShow

instance eqHaloRasterizer :: Eq HaloRasterizer where eq = GEq.genericEq


--------------------------------------------------------------------------------
_HaloRasterizerFull :: Prism' HaloRasterizer Unit
_HaloRasterizerFull = prism' (\_ -> HaloRasterizerFull) f
  where
    f HaloRasterizerFull = Just unit
    f _ = Nothing

_HaloRasterizerFast :: Prism' HaloRasterizer Unit
_HaloRasterizerFast = prism' (\_ -> HaloRasterizerFast) f
  where
    f HaloRasterizerFast = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data PointPlacement =
    CentroidPointPlacement
  | InteriorPointPlacement

derive instance genericPointPlacement :: Generic PointPlacement _

instance encodePointPlacement :: Encode PointPlacement where encode = genericEncode jOpts

instance decodePointPlacement :: Decode PointPlacement where decode = genericDecode jOpts

instance showPointPlacement :: Show PointPlacement where show = GShow.genericShow

instance eqPointPlacement :: Eq PointPlacement where eq = GEq.genericEq


--------------------------------------------------------------------------------
_CentroidPointPlacement :: Prism' PointPlacement Unit
_CentroidPointPlacement = prism' (\_ -> CentroidPointPlacement) f
  where
    f CentroidPointPlacement = Just unit
    f _ = Nothing

_InteriorPointPlacement :: Prism' PointPlacement Unit
_InteriorPointPlacement = prism' (\_ -> InteriorPointPlacement) f
  where
    f InteriorPointPlacement = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data PatternAlignment =
    LocalAlignment
  | GlobalAlignment

derive instance genericPatternAlignment :: Generic PatternAlignment _

instance encodePatternAlignment :: Encode PatternAlignment where encode = genericEncode jOpts

instance decodePatternAlignment :: Decode PatternAlignment where decode = genericDecode jOpts

instance showPatternAlignment :: Show PatternAlignment where show = GShow.genericShow

instance eqPatternAlignment :: Eq PatternAlignment where eq = GEq.genericEq


--------------------------------------------------------------------------------
_LocalAlignment :: Prism' PatternAlignment Unit
_LocalAlignment = prism' (\_ -> LocalAlignment) f
  where
    f LocalAlignment = Just unit
    f _ = Nothing

_GlobalAlignment :: Prism' PatternAlignment Unit
_GlobalAlignment = prism' (\_ -> GlobalAlignment) f
  where
    f GlobalAlignment = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data DebugMode =
    DebugModeCollision
  | DebugModeVertex
  | DebugModeRings

derive instance genericDebugMode :: Generic DebugMode _

instance encodeDebugMode :: Encode DebugMode where encode = genericEncode jOpts

instance decodeDebugMode :: Decode DebugMode where decode = genericDecode jOpts

instance showDebugMode :: Show DebugMode where show = GShow.genericShow

instance eqDebugMode :: Eq DebugMode where eq = GEq.genericEq


--------------------------------------------------------------------------------
_DebugModeCollision :: Prism' DebugMode Unit
_DebugModeCollision = prism' (\_ -> DebugModeCollision) f
  where
    f DebugModeCollision = Just unit
    f _ = Nothing

_DebugModeVertex :: Prism' DebugMode Unit
_DebugModeVertex = prism' (\_ -> DebugModeVertex) f
  where
    f DebugModeVertex = Just unit
    f _ = Nothing

_DebugModeRings :: Prism' DebugMode Unit
_DebugModeRings = prism' (\_ -> DebugModeRings) f
  where
    f DebugModeRings = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data MarkerPlacement =
    MarkerPointPlacement
  | MarkerInteriorPlacement
  | MarkerLinePlacement
  | MarkerVertexFirstPlacement
  | MarkerVertexLastPlacement

derive instance genericMarkerPlacement :: Generic MarkerPlacement _

instance encodeMarkerPlacement :: Encode MarkerPlacement where encode = genericEncode jOpts

instance decodeMarkerPlacement :: Decode MarkerPlacement where decode = genericDecode jOpts

instance showMarkerPlacement :: Show MarkerPlacement where show = GShow.genericShow

instance eqMarkerPlacement :: Eq MarkerPlacement where eq = GEq.genericEq


--------------------------------------------------------------------------------
_MarkerPointPlacement :: Prism' MarkerPlacement Unit
_MarkerPointPlacement = prism' (\_ -> MarkerPointPlacement) f
  where
    f MarkerPointPlacement = Just unit
    f _ = Nothing

_MarkerInteriorPlacement :: Prism' MarkerPlacement Unit
_MarkerInteriorPlacement = prism' (\_ -> MarkerInteriorPlacement) f
  where
    f MarkerInteriorPlacement = Just unit
    f _ = Nothing

_MarkerLinePlacement :: Prism' MarkerPlacement Unit
_MarkerLinePlacement = prism' (\_ -> MarkerLinePlacement) f
  where
    f MarkerLinePlacement = Just unit
    f _ = Nothing

_MarkerVertexFirstPlacement :: Prism' MarkerPlacement Unit
_MarkerVertexFirstPlacement = prism' (\_ -> MarkerVertexFirstPlacement) f
  where
    f MarkerVertexFirstPlacement = Just unit
    f _ = Nothing

_MarkerVertexLastPlacement :: Prism' MarkerPlacement Unit
_MarkerVertexLastPlacement = prism' (\_ -> MarkerVertexLastPlacement) f
  where
    f MarkerVertexLastPlacement = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data MarkerMultiPolicy =
    MarkerEachMulti
  | MarkerWholeMulti
  | MarkerLargestMulti

derive instance genericMarkerMultiPolicy :: Generic MarkerMultiPolicy _

instance encodeMarkerMultiPolicy :: Encode MarkerMultiPolicy where encode = genericEncode jOpts

instance decodeMarkerMultiPolicy :: Decode MarkerMultiPolicy where decode = genericDecode jOpts

instance showMarkerMultiPolicy :: Show MarkerMultiPolicy where show = GShow.genericShow

instance eqMarkerMultiPolicy :: Eq MarkerMultiPolicy where eq = GEq.genericEq


--------------------------------------------------------------------------------
_MarkerEachMulti :: Prism' MarkerMultiPolicy Unit
_MarkerEachMulti = prism' (\_ -> MarkerEachMulti) f
  where
    f MarkerEachMulti = Just unit
    f _ = Nothing

_MarkerWholeMulti :: Prism' MarkerMultiPolicy Unit
_MarkerWholeMulti = prism' (\_ -> MarkerWholeMulti) f
  where
    f MarkerWholeMulti = Just unit
    f _ = Nothing

_MarkerLargestMulti :: Prism' MarkerMultiPolicy Unit
_MarkerLargestMulti = prism' (\_ -> MarkerLargestMulti) f
  where
    f MarkerLargestMulti = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data TextTransform =
    None
  | Uppercase
  | Lowercase
  | Capitalize
  | Reverse

derive instance genericTextTransform :: Generic TextTransform _

instance encodeTextTransform :: Encode TextTransform where encode = genericEncode jOpts

instance decodeTextTransform :: Decode TextTransform where decode = genericDecode jOpts

instance showTextTransform :: Show TextTransform where show = GShow.genericShow

instance eqTextTransform :: Eq TextTransform where eq = GEq.genericEq


--------------------------------------------------------------------------------
_None :: Prism' TextTransform Unit
_None = prism' (\_ -> None) f
  where
    f None = Just unit
    f _ = Nothing

_Uppercase :: Prism' TextTransform Unit
_Uppercase = prism' (\_ -> Uppercase) f
  where
    f Uppercase = Just unit
    f _ = Nothing

_Lowercase :: Prism' TextTransform Unit
_Lowercase = prism' (\_ -> Lowercase) f
  where
    f Lowercase = Just unit
    f _ = Nothing

_Capitalize :: Prism' TextTransform Unit
_Capitalize = prism' (\_ -> Capitalize) f
  where
    f Capitalize = Just unit
    f _ = Nothing

_Reverse :: Prism' TextTransform Unit
_Reverse = prism' (\_ -> Reverse) f
  where
    f Reverse = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data LabelPlacement =
    PointPlacement
  | LinePlacement
  | VertexPlacement
  | InteriorPlacement

derive instance genericLabelPlacement :: Generic LabelPlacement _

instance encodeLabelPlacement :: Encode LabelPlacement where encode = genericEncode jOpts

instance decodeLabelPlacement :: Decode LabelPlacement where decode = genericDecode jOpts

instance showLabelPlacement :: Show LabelPlacement where show = GShow.genericShow

instance eqLabelPlacement :: Eq LabelPlacement where eq = GEq.genericEq


--------------------------------------------------------------------------------
_PointPlacement :: Prism' LabelPlacement Unit
_PointPlacement = prism' (\_ -> PointPlacement) f
  where
    f PointPlacement = Just unit
    f _ = Nothing

_LinePlacement :: Prism' LabelPlacement Unit
_LinePlacement = prism' (\_ -> LinePlacement) f
  where
    f LinePlacement = Just unit
    f _ = Nothing

_VertexPlacement :: Prism' LabelPlacement Unit
_VertexPlacement = prism' (\_ -> VertexPlacement) f
  where
    f VertexPlacement = Just unit
    f _ = Nothing

_InteriorPlacement :: Prism' LabelPlacement Unit
_InteriorPlacement = prism' (\_ -> InteriorPlacement) f
  where
    f InteriorPlacement = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data VerticalAlignment =
    VTop
  | VMiddle
  | VBottom
  | VAuto

derive instance genericVerticalAlignment :: Generic VerticalAlignment _

instance encodeVerticalAlignment :: Encode VerticalAlignment where encode = genericEncode jOpts

instance decodeVerticalAlignment :: Decode VerticalAlignment where decode = genericDecode jOpts

instance showVerticalAlignment :: Show VerticalAlignment where show = GShow.genericShow

instance eqVerticalAlignment :: Eq VerticalAlignment where eq = GEq.genericEq


--------------------------------------------------------------------------------
_VTop :: Prism' VerticalAlignment Unit
_VTop = prism' (\_ -> VTop) f
  where
    f VTop = Just unit
    f _ = Nothing

_VMiddle :: Prism' VerticalAlignment Unit
_VMiddle = prism' (\_ -> VMiddle) f
  where
    f VMiddle = Just unit
    f _ = Nothing

_VBottom :: Prism' VerticalAlignment Unit
_VBottom = prism' (\_ -> VBottom) f
  where
    f VBottom = Just unit
    f _ = Nothing

_VAuto :: Prism' VerticalAlignment Unit
_VAuto = prism' (\_ -> VAuto) f
  where
    f VAuto = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data HorizontalAlignment =
    HLeft
  | HMiddle
  | HRight
  | HAuto
  | HAdjust

derive instance genericHorizontalAlignment :: Generic HorizontalAlignment _

instance encodeHorizontalAlignment :: Encode HorizontalAlignment where encode = genericEncode jOpts

instance decodeHorizontalAlignment :: Decode HorizontalAlignment where decode = genericDecode jOpts

instance showHorizontalAlignment :: Show HorizontalAlignment where show = GShow.genericShow

instance eqHorizontalAlignment :: Eq HorizontalAlignment where eq = GEq.genericEq


--------------------------------------------------------------------------------
_HLeft :: Prism' HorizontalAlignment Unit
_HLeft = prism' (\_ -> HLeft) f
  where
    f HLeft = Just unit
    f _ = Nothing

_HMiddle :: Prism' HorizontalAlignment Unit
_HMiddle = prism' (\_ -> HMiddle) f
  where
    f HMiddle = Just unit
    f _ = Nothing

_HRight :: Prism' HorizontalAlignment Unit
_HRight = prism' (\_ -> HRight) f
  where
    f HRight = Just unit
    f _ = Nothing

_HAuto :: Prism' HorizontalAlignment Unit
_HAuto = prism' (\_ -> HAuto) f
  where
    f HAuto = Just unit
    f _ = Nothing

_HAdjust :: Prism' HorizontalAlignment Unit
_HAdjust = prism' (\_ -> HAdjust) f
  where
    f HAdjust = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data JustifyAlignment =
    JLeft
  | JMiddle
  | JRight
  | JAuto

derive instance genericJustifyAlignment :: Generic JustifyAlignment _

instance encodeJustifyAlignment :: Encode JustifyAlignment where encode = genericEncode jOpts

instance decodeJustifyAlignment :: Decode JustifyAlignment where decode = genericDecode jOpts

instance showJustifyAlignment :: Show JustifyAlignment where show = GShow.genericShow

instance eqJustifyAlignment :: Eq JustifyAlignment where eq = GEq.genericEq


--------------------------------------------------------------------------------
_JLeft :: Prism' JustifyAlignment Unit
_JLeft = prism' (\_ -> JLeft) f
  where
    f JLeft = Just unit
    f _ = Nothing

_JMiddle :: Prism' JustifyAlignment Unit
_JMiddle = prism' (\_ -> JMiddle) f
  where
    f JMiddle = Just unit
    f _ = Nothing

_JRight :: Prism' JustifyAlignment Unit
_JRight = prism' (\_ -> JRight) f
  where
    f JRight = Just unit
    f _ = Nothing

_JAuto :: Prism' JustifyAlignment Unit
_JAuto = prism' (\_ -> JAuto) f
  where
    f JAuto = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Upright =
    UprightAuto
  | UprightAutoDown
  | UprightLeft
  | UprightRight
  | UprightLeftOnly
  | UprightRightOnly

derive instance genericUpright :: Generic Upright _

instance encodeUpright :: Encode Upright where encode = genericEncode jOpts

instance decodeUpright :: Decode Upright where decode = genericDecode jOpts

instance showUpright :: Show Upright where show = GShow.genericShow

instance eqUpright :: Eq Upright where eq = GEq.genericEq


--------------------------------------------------------------------------------
_UprightAuto :: Prism' Upright Unit
_UprightAuto = prism' (\_ -> UprightAuto) f
  where
    f UprightAuto = Just unit
    f _ = Nothing

_UprightAutoDown :: Prism' Upright Unit
_UprightAutoDown = prism' (\_ -> UprightAutoDown) f
  where
    f UprightAutoDown = Just unit
    f _ = Nothing

_UprightLeft :: Prism' Upright Unit
_UprightLeft = prism' (\_ -> UprightLeft) f
  where
    f UprightLeft = Just unit
    f _ = Nothing

_UprightRight :: Prism' Upright Unit
_UprightRight = prism' (\_ -> UprightRight) f
  where
    f UprightRight = Just unit
    f _ = Nothing

_UprightLeftOnly :: Prism' Upright Unit
_UprightLeftOnly = prism' (\_ -> UprightLeftOnly) f
  where
    f UprightLeftOnly = Just unit
    f _ = Nothing

_UprightRightOnly :: Prism' Upright Unit
_UprightRightOnly = prism' (\_ -> UprightRightOnly) f
  where
    f UprightRightOnly = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Direction =
    DirectionLeft
  | DirectionRight
  | DirectionLeftOnly
  | DirectionRightOnly
  | DirectionAuto
  | DirectionAutoDown
  | DirectionUp
  | DirectionDown

derive instance genericDirection :: Generic Direction _

instance encodeDirection :: Encode Direction where encode = genericEncode jOpts

instance decodeDirection :: Decode Direction where decode = genericDecode jOpts

instance showDirection :: Show Direction where show = GShow.genericShow

instance eqDirection :: Eq Direction where eq = GEq.genericEq


--------------------------------------------------------------------------------
_DirectionLeft :: Prism' Direction Unit
_DirectionLeft = prism' (\_ -> DirectionLeft) f
  where
    f DirectionLeft = Just unit
    f _ = Nothing

_DirectionRight :: Prism' Direction Unit
_DirectionRight = prism' (\_ -> DirectionRight) f
  where
    f DirectionRight = Just unit
    f _ = Nothing

_DirectionLeftOnly :: Prism' Direction Unit
_DirectionLeftOnly = prism' (\_ -> DirectionLeftOnly) f
  where
    f DirectionLeftOnly = Just unit
    f _ = Nothing

_DirectionRightOnly :: Prism' Direction Unit
_DirectionRightOnly = prism' (\_ -> DirectionRightOnly) f
  where
    f DirectionRightOnly = Just unit
    f _ = Nothing

_DirectionAuto :: Prism' Direction Unit
_DirectionAuto = prism' (\_ -> DirectionAuto) f
  where
    f DirectionAuto = Just unit
    f _ = Nothing

_DirectionAutoDown :: Prism' Direction Unit
_DirectionAutoDown = prism' (\_ -> DirectionAutoDown) f
  where
    f DirectionAutoDown = Just unit
    f _ = Nothing

_DirectionUp :: Prism' Direction Unit
_DirectionUp = prism' (\_ -> DirectionUp) f
  where
    f DirectionUp = Just unit
    f _ = Nothing

_DirectionDown :: Prism' Direction Unit
_DirectionDown = prism' (\_ -> DirectionDown) f
  where
    f DirectionDown = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data PlacementDirection =
    North
  | East
  | South
  | West
  | NorthEast
  | SouthEast
  | NorthWest
  | SouthWest
  | PExact

derive instance genericPlacementDirection :: Generic PlacementDirection _

instance encodePlacementDirection :: Encode PlacementDirection where encode = genericEncode jOpts

instance decodePlacementDirection :: Decode PlacementDirection where decode = genericDecode jOpts

instance showPlacementDirection :: Show PlacementDirection where show = GShow.genericShow

instance eqPlacementDirection :: Eq PlacementDirection where eq = GEq.genericEq


--------------------------------------------------------------------------------
_North :: Prism' PlacementDirection Unit
_North = prism' (\_ -> North) f
  where
    f North = Just unit
    f _ = Nothing

_East :: Prism' PlacementDirection Unit
_East = prism' (\_ -> East) f
  where
    f East = Just unit
    f _ = Nothing

_South :: Prism' PlacementDirection Unit
_South = prism' (\_ -> South) f
  where
    f South = Just unit
    f _ = Nothing

_West :: Prism' PlacementDirection Unit
_West = prism' (\_ -> West) f
  where
    f West = Just unit
    f _ = Nothing

_NorthEast :: Prism' PlacementDirection Unit
_NorthEast = prism' (\_ -> NorthEast) f
  where
    f NorthEast = Just unit
    f _ = Nothing

_SouthEast :: Prism' PlacementDirection Unit
_SouthEast = prism' (\_ -> SouthEast) f
  where
    f SouthEast = Just unit
    f _ = Nothing

_NorthWest :: Prism' PlacementDirection Unit
_NorthWest = prism' (\_ -> NorthWest) f
  where
    f NorthWest = Just unit
    f _ = Nothing

_SouthWest :: Prism' PlacementDirection Unit
_SouthWest = prism' (\_ -> SouthWest) f
  where
    f SouthWest = Just unit
    f _ = Nothing

_PExact :: Prism' PlacementDirection Unit
_PExact = prism' (\_ -> PExact) f
  where
    f PExact = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data GammaMethod =
    GammaPower
  | GammaLinear
  | GammaNone
  | GammaThreshold
  | GammaMultiply

derive instance genericGammaMethod :: Generic GammaMethod _

instance encodeGammaMethod :: Encode GammaMethod where encode = genericEncode jOpts

instance decodeGammaMethod :: Decode GammaMethod where decode = genericDecode jOpts

instance showGammaMethod :: Show GammaMethod where show = GShow.genericShow

instance eqGammaMethod :: Eq GammaMethod where eq = GEq.genericEq


--------------------------------------------------------------------------------
_GammaPower :: Prism' GammaMethod Unit
_GammaPower = prism' (\_ -> GammaPower) f
  where
    f GammaPower = Just unit
    f _ = Nothing

_GammaLinear :: Prism' GammaMethod Unit
_GammaLinear = prism' (\_ -> GammaLinear) f
  where
    f GammaLinear = Just unit
    f _ = Nothing

_GammaNone :: Prism' GammaMethod Unit
_GammaNone = prism' (\_ -> GammaNone) f
  where
    f GammaNone = Just unit
    f _ = Nothing

_GammaThreshold :: Prism' GammaMethod Unit
_GammaThreshold = prism' (\_ -> GammaThreshold) f
  where
    f GammaThreshold = Just unit
    f _ = Nothing

_GammaMultiply :: Prism' GammaMethod Unit
_GammaMultiply = prism' (\_ -> GammaMultiply) f
  where
    f GammaMultiply = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data ColorizerMode =
    Inherit
  | Linear
  | Discrete
  | CExact

derive instance genericColorizerMode :: Generic ColorizerMode _

instance encodeColorizerMode :: Encode ColorizerMode where encode = genericEncode jOpts

instance decodeColorizerMode :: Decode ColorizerMode where decode = genericDecode jOpts

instance showColorizerMode :: Show ColorizerMode where show = GShow.genericShow

instance eqColorizerMode :: Eq ColorizerMode where eq = GEq.genericEq


--------------------------------------------------------------------------------
_Inherit :: Prism' ColorizerMode Unit
_Inherit = prism' (\_ -> Inherit) f
  where
    f Inherit = Just unit
    f _ = Nothing

_Linear :: Prism' ColorizerMode Unit
_Linear = prism' (\_ -> Linear) f
  where
    f Linear = Just unit
    f _ = Nothing

_Discrete :: Prism' ColorizerMode Unit
_Discrete = prism' (\_ -> Discrete) f
  where
    f Discrete = Just unit
    f _ = Nothing

_CExact :: Prism' ColorizerMode Unit
_CExact = prism' (\_ -> CExact) f
  where
    f CExact = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data ScalingMethod =
    Near
  | Bilinear
  | Bicubic
  | Spline16
  | Spline36
  | Hanning
  | Hamming
  | Hermite
  | Kaiser
  | Quadric
  | Catrom
  | Gaussian
  | Bessel
  | Mitchell
  | Sinc
  | Lanczos
  | Blackman

derive instance genericScalingMethod :: Generic ScalingMethod _

instance encodeScalingMethod :: Encode ScalingMethod where encode = genericEncode jOpts

instance decodeScalingMethod :: Decode ScalingMethod where decode = genericDecode jOpts

instance showScalingMethod :: Show ScalingMethod where show = GShow.genericShow

instance eqScalingMethod :: Eq ScalingMethod where eq = GEq.genericEq


--------------------------------------------------------------------------------
_Near :: Prism' ScalingMethod Unit
_Near = prism' (\_ -> Near) f
  where
    f Near = Just unit
    f _ = Nothing

_Bilinear :: Prism' ScalingMethod Unit
_Bilinear = prism' (\_ -> Bilinear) f
  where
    f Bilinear = Just unit
    f _ = Nothing

_Bicubic :: Prism' ScalingMethod Unit
_Bicubic = prism' (\_ -> Bicubic) f
  where
    f Bicubic = Just unit
    f _ = Nothing

_Spline16 :: Prism' ScalingMethod Unit
_Spline16 = prism' (\_ -> Spline16) f
  where
    f Spline16 = Just unit
    f _ = Nothing

_Spline36 :: Prism' ScalingMethod Unit
_Spline36 = prism' (\_ -> Spline36) f
  where
    f Spline36 = Just unit
    f _ = Nothing

_Hanning :: Prism' ScalingMethod Unit
_Hanning = prism' (\_ -> Hanning) f
  where
    f Hanning = Just unit
    f _ = Nothing

_Hamming :: Prism' ScalingMethod Unit
_Hamming = prism' (\_ -> Hamming) f
  where
    f Hamming = Just unit
    f _ = Nothing

_Hermite :: Prism' ScalingMethod Unit
_Hermite = prism' (\_ -> Hermite) f
  where
    f Hermite = Just unit
    f _ = Nothing

_Kaiser :: Prism' ScalingMethod Unit
_Kaiser = prism' (\_ -> Kaiser) f
  where
    f Kaiser = Just unit
    f _ = Nothing

_Quadric :: Prism' ScalingMethod Unit
_Quadric = prism' (\_ -> Quadric) f
  where
    f Quadric = Just unit
    f _ = Nothing

_Catrom :: Prism' ScalingMethod Unit
_Catrom = prism' (\_ -> Catrom) f
  where
    f Catrom = Just unit
    f _ = Nothing

_Gaussian :: Prism' ScalingMethod Unit
_Gaussian = prism' (\_ -> Gaussian) f
  where
    f Gaussian = Just unit
    f _ = Nothing

_Bessel :: Prism' ScalingMethod Unit
_Bessel = prism' (\_ -> Bessel) f
  where
    f Bessel = Just unit
    f _ = Nothing

_Mitchell :: Prism' ScalingMethod Unit
_Mitchell = prism' (\_ -> Mitchell) f
  where
    f Mitchell = Just unit
    f _ = Nothing

_Sinc :: Prism' ScalingMethod Unit
_Sinc = prism' (\_ -> Sinc) f
  where
    f Sinc = Just unit
    f _ = Nothing

_Lanczos :: Prism' ScalingMethod Unit
_Lanczos = prism' (\_ -> Lanczos) f
  where
    f Lanczos = Just unit
    f _ = Nothing

_Blackman :: Prism' ScalingMethod Unit
_Blackman = prism' (\_ -> Blackman) f
  where
    f Blackman = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data SimplifyAlgorithm =
    RadialDistance
  | DouglasPeucker
  | VisvalingamWhyatt
  | ZhaoSaalfeld

derive instance genericSimplifyAlgorithm :: Generic SimplifyAlgorithm _

instance encodeSimplifyAlgorithm :: Encode SimplifyAlgorithm where encode = genericEncode jOpts

instance decodeSimplifyAlgorithm :: Decode SimplifyAlgorithm where decode = genericDecode jOpts

instance showSimplifyAlgorithm :: Show SimplifyAlgorithm where show = GShow.genericShow

instance eqSimplifyAlgorithm :: Eq SimplifyAlgorithm where eq = GEq.genericEq


--------------------------------------------------------------------------------
_RadialDistance :: Prism' SimplifyAlgorithm Unit
_RadialDistance = prism' (\_ -> RadialDistance) f
  where
    f RadialDistance = Just unit
    f _ = Nothing

_DouglasPeucker :: Prism' SimplifyAlgorithm Unit
_DouglasPeucker = prism' (\_ -> DouglasPeucker) f
  where
    f DouglasPeucker = Just unit
    f _ = Nothing

_VisvalingamWhyatt :: Prism' SimplifyAlgorithm Unit
_VisvalingamWhyatt = prism' (\_ -> VisvalingamWhyatt) f
  where
    f VisvalingamWhyatt = Just unit
    f _ = Nothing

_ZhaoSaalfeld :: Prism' SimplifyAlgorithm Unit
_ZhaoSaalfeld = prism' (\_ -> ZhaoSaalfeld) f
  where
    f ZhaoSaalfeld = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data FilterMode =
    FilterAll
  | FilterFirst

derive instance genericFilterMode :: Generic FilterMode _

instance encodeFilterMode :: Encode FilterMode where encode = genericEncode jOpts

instance decodeFilterMode :: Decode FilterMode where decode = genericDecode jOpts

instance showFilterMode :: Show FilterMode where show = GShow.genericShow

instance eqFilterMode :: Eq FilterMode where eq = GEq.genericEq


--------------------------------------------------------------------------------
_FilterAll :: Prism' FilterMode Unit
_FilterAll = prism' (\_ -> FilterAll) f
  where
    f FilterAll = Just unit
    f _ = Nothing

_FilterFirst :: Prism' FilterMode Unit
_FilterFirst = prism' (\_ -> FilterFirst) f
  where
    f FilterFirst = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
