-- File auto generated by purescript-bridge! --
module Mapnik.Rule where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Mapnik.Common (Expression)
import Mapnik.Symbolizer (Symbolizer)
import Prim (Array, Boolean, Number, String)

import Prelude
import Data.Generic.Rep (class Generic)
import Data.Foreign.Class (class Decode, class Encode, decode, encode)
import Data.Foreign.Generic (defaultOptions, genericEncode, genericDecode)
import Data.Foreign.Generic.Types (Options, SumEncoding(..))
import Data.Foreign.Generic.Class (class GenericDecode, class GenericEncode)
import Data.Generic.Rep.Eq as GEq
import Data.Generic.Rep.Show as GShow

jOpts = defaultOptions { sumEncoding = ObjectWithSingleField, unwrapSingleConstructors = true}
newtype Rule =
    Rule {
      name :: Maybe String
    , symbolizers :: Array Symbolizer
    , filter :: Maybe Expression
    , hasElse :: Maybe Boolean
    , hasAlso :: Maybe Boolean
    , minimumScaleDenominator :: Maybe Number
    , maximumScaleDenominator :: Maybe Number
    }

derive instance genericRule :: Generic Rule _

instance encodeRule :: Encode Rule where encode = genericEncode jOpts

instance decodeRule :: Decode Rule where decode = genericDecode jOpts

instance showRule :: Show Rule where show = GShow.genericShow

instance eqRule :: Eq Rule where eq = GEq.genericEq

derive instance newtypeRule :: Newtype Rule _


--------------------------------------------------------------------------------
_Rule :: Iso' Rule { name :: Maybe String, symbolizers :: Array Symbolizer, filter :: Maybe Expression, hasElse :: Maybe Boolean, hasAlso :: Maybe Boolean, minimumScaleDenominator :: Maybe Number, maximumScaleDenominator :: Maybe Number}
_Rule = _Newtype

--------------------------------------------------------------------------------
