-- File auto generated by purescript-bridge! --
module Mapnik.Layer where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Mapnik.Common (Box)
import Prim (Array, Boolean, Int, Number, String)

import Prelude
import Data.Generic.Rep (class Generic)
import Data.Foreign.Class (class Decode, class Encode, decode, encode)
import Data.Foreign.Generic (defaultOptions, genericEncode, genericDecode)
import Data.Foreign.Generic.Types (Options, SumEncoding(..))
import Data.Foreign.Generic.Class (class GenericDecode, class GenericEncode)
import Data.Generic.Rep.Eq as GEq
import Data.Generic.Rep.Show as GShow

jOpts = defaultOptions { sumEncoding = ObjectWithSingleField, unwrapSingleConstructors = true}
newtype Layer a =
    Layer {
      name :: String
    , dataSource :: Maybe a
    , styles :: Array String
    , srs :: Maybe String
    , minimumScaleDenominator :: Maybe Number
    , maximumScaleDenominator :: Maybe Number
    , queryable :: Maybe Boolean
    , clearLabelCache :: Maybe Boolean
    , cacheFeatures :: Maybe Boolean
    , groupBy :: Maybe String
    , bufferSize :: Maybe Int
    , maximumExtent :: Maybe Box
    }

derive instance genericLayer :: Generic (Layer a) _

instance encodeLayer :: Encode a => Encode (Layer a) where encode = genericEncode jOpts

instance decodeLayer :: Decode a => Decode (Layer a) where decode = genericDecode jOpts

instance showLayer :: Show a => Show (Layer a) where show = GShow.genericShow

instance eqLayer :: Eq a => Eq (Layer a) where eq = GEq.genericEq

derive instance newtypeLayer :: Newtype (Layer a) _


--------------------------------------------------------------------------------
_Layer :: forall a. Iso' (Layer a) { name :: String, dataSource :: Maybe a, styles :: Array String, srs :: Maybe String, minimumScaleDenominator :: Maybe Number, maximumScaleDenominator :: Maybe Number, queryable :: Maybe Boolean, clearLabelCache :: Maybe Boolean, cacheFeatures :: Maybe Boolean, groupBy :: Maybe String, bufferSize :: Maybe Int, maximumExtent :: Maybe Box}
_Layer = _Newtype

--------------------------------------------------------------------------------
