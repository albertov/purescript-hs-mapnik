-- File auto generated by purescript-bridge! --
module Mapnik.ImageFilter where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Mapnik.Color (Color)
import Prim (Array, Int, Number)

import Prelude
import Data.Generic.Rep (class Generic)

data ImageFilter =
    Blur
  | Emboss
  | Sharpen
  | EdgeDetect
  | Sobel
  | Gray
  | XGradient
  | YGradient
  | Invert
  | ColorBlindProtanope
  | ColorBlindDeuteranope
  | ColorBlindTritanope
  | AggStackBlur Int Int
  | ColorToAlpha Color
  | ScaleHsla Number Number Number Number Number Number Number Number
  | ColorizeAlpha (Array ColorStop)

derive instance genericImageFilter :: Generic ImageFilter _


--------------------------------------------------------------------------------
_Blur :: Prism' ImageFilter Unit
_Blur = prism' (\_ -> Blur) f
  where
    f Blur = Just unit
    f _ = Nothing

_Emboss :: Prism' ImageFilter Unit
_Emboss = prism' (\_ -> Emboss) f
  where
    f Emboss = Just unit
    f _ = Nothing

_Sharpen :: Prism' ImageFilter Unit
_Sharpen = prism' (\_ -> Sharpen) f
  where
    f Sharpen = Just unit
    f _ = Nothing

_EdgeDetect :: Prism' ImageFilter Unit
_EdgeDetect = prism' (\_ -> EdgeDetect) f
  where
    f EdgeDetect = Just unit
    f _ = Nothing

_Sobel :: Prism' ImageFilter Unit
_Sobel = prism' (\_ -> Sobel) f
  where
    f Sobel = Just unit
    f _ = Nothing

_Gray :: Prism' ImageFilter Unit
_Gray = prism' (\_ -> Gray) f
  where
    f Gray = Just unit
    f _ = Nothing

_XGradient :: Prism' ImageFilter Unit
_XGradient = prism' (\_ -> XGradient) f
  where
    f XGradient = Just unit
    f _ = Nothing

_YGradient :: Prism' ImageFilter Unit
_YGradient = prism' (\_ -> YGradient) f
  where
    f YGradient = Just unit
    f _ = Nothing

_Invert :: Prism' ImageFilter Unit
_Invert = prism' (\_ -> Invert) f
  where
    f Invert = Just unit
    f _ = Nothing

_ColorBlindProtanope :: Prism' ImageFilter Unit
_ColorBlindProtanope = prism' (\_ -> ColorBlindProtanope) f
  where
    f ColorBlindProtanope = Just unit
    f _ = Nothing

_ColorBlindDeuteranope :: Prism' ImageFilter Unit
_ColorBlindDeuteranope = prism' (\_ -> ColorBlindDeuteranope) f
  where
    f ColorBlindDeuteranope = Just unit
    f _ = Nothing

_ColorBlindTritanope :: Prism' ImageFilter Unit
_ColorBlindTritanope = prism' (\_ -> ColorBlindTritanope) f
  where
    f ColorBlindTritanope = Just unit
    f _ = Nothing

_AggStackBlur :: Prism' ImageFilter { a :: Int, b :: Int }
_AggStackBlur = prism' (\{ a, b } -> AggStackBlur a b) f
  where
    f (AggStackBlur a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ColorToAlpha :: Prism' ImageFilter Color
_ColorToAlpha = prism' ColorToAlpha f
  where
    f (ColorToAlpha a) = Just $ a
    f _ = Nothing

_ScaleHsla :: Prism' ImageFilter { a :: Number, b :: Number, c :: Number, d :: Number, e :: Number, f :: Number, g :: Number, h :: Number }
_ScaleHsla = prism' (\{ a, b, c, d, e, f, g, h } -> ScaleHsla a b c d e f g h) f
  where
    f (ScaleHsla a b c d e f g h) = Just $ { a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h }
    f _ = Nothing

_ColorizeAlpha :: Prism' ImageFilter (Array ColorStop)
_ColorizeAlpha = prism' ColorizeAlpha f
  where
    f (ColorizeAlpha a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype ColorStop =
    ColorStop {
      color :: Color
    , value :: Maybe Number
    }

derive instance genericColorStop :: Generic ColorStop _

derive instance newtypeColorStop :: Newtype ColorStop _


--------------------------------------------------------------------------------
_ColorStop :: Iso' ColorStop { color :: Color, value :: Maybe Number}
_ColorStop = _Newtype

--------------------------------------------------------------------------------
