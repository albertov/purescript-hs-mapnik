diff -ur src/Mapnik/Symbolizer.purs src.modified/Mapnik/Symbolizer.purs
--- src/Mapnik/Symbolizer.purs	2018-01-01 19:39:55.159861208 +0100
+++ src.modified/Mapnik/Symbolizer.purs	2018-01-01 19:39:18.598455838 +0100
@@ -21,6 +21,18 @@
 import Data.Generic.Rep.Eq as GEq
 import Data.Generic.Rep.Show as GShow
 
+import Data.Array (head)
+import Data.Maybe (maybe)
+import Data.Foreign (Foreign, F, ForeignError(..), toForeign, isNull)
+import Control.Monad.Error.Class (throwError)
+import Data.List.NonEmpty as NEL
+import Data.StrMap as SM
+import Data.Traversable (traverse)
+
+decodeMay Nothing = pure Nothing
+decodeMay (Just s) | isNull s = pure Nothing
+decodeMay (Just s) = decode s
+
 jOpts = defaultOptions { sumEncoding = ObjectWithSingleField, unwrapSingleConstructors = true}
 data Symbolizer =
     PointSymbolizer {
@@ -478,13 +490,34 @@
 
 derive instance genericGroupRule :: Generic GroupRule _
 
-instance encodeGroupRule :: Encode GroupRule where encode = genericEncode jOpts
-
-instance decodeGroupRule :: Decode GroupRule where decode = genericDecode jOpts
-
-instance showGroupRule :: Show GroupRule where show = GShow.genericShow
-
-instance eqGroupRule :: Eq GroupRule where eq = GEq.genericEq
+instance encodeGroupRule :: Encode GroupRule where
+  encode (GroupRule x) = toForeign
+    $ SM.insert "symbolizers" (toForeign (encode <$> x.symbolizers))
+    $ SM.insert "filter" (encode x.filter)
+    $ SM.insert "repeatKey" (encode x.repeatKey)
+    $ SM.empty
+
+instance decodeGroupRule :: Decode GroupRule where
+  decode json = decode json >>= \ obj -> do
+    symbolizersJ <- maybe error pure $ SM.lookup "symbolizers" obj
+    symbolizers <- traverse decode =<< decode symbolizersJ
+    filter <- decodeMay (SM.lookup "filter" obj)
+    repeatKey <- decodeMay (SM.lookup "repeatKey" obj)
+    pure (GroupRule {symbolizers,filter,repeatKey})
+    where
+      error = throwError $ NEL.singleton $ ForeignError "Expected field 'symbolizers'"
+
+instance showGroupRule :: Show GroupRule where
+  show (GroupRule r) = ("GroupRule { symbolizers: "
+                    <> show r.symbolizers
+                    <> ", filter: " <> show r.filter
+                    <> ", repeatKey: " <> show r.repeatKey
+                    <> "}")
+
+instance eqGroupRule :: Eq GroupRule where
+  eq (GroupRule a) (GroupRule b) = a.symbolizers `eq` b.symbolizers &&
+                                   a.filter      `eq` b.filter &&
+                                   a.repeatKey   `eq` b.repeatKey
 
 derive instance newtypeGroupRule :: Newtype GroupRule _
 
@@ -633,13 +666,151 @@
 
 derive instance genericFormat :: Generic Format _
 
-instance encodeFormat :: Encode Format where encode = genericEncode jOpts
-
-instance decodeFormat :: Decode Format where decode = genericDecode jOpts
-
-instance showFormat :: Show Format where show = GShow.genericShow
-
-instance eqFormat :: Eq Format where eq = GEq.genericEq
+instance encodeFormat :: Encode Format where
+  encode (FormatExp e) = toForeign $ SM.insert "FormatExp" (encode e) $ SM.empty
+  encode (FormatList xs) = toForeign $ SM.insert "FormatList" o $ SM.empty
+    where o = toForeign (encode <$> xs)
+  encode (Format f) = toForeign $ SM.insert "Format" o $ SM.empty
+    where o = toForeign
+            $ SM.insert "font" (encode f.font)
+            $ SM.insert "textSize" (encode f.textSize)
+            $ SM.insert "opacity" (encode f.opacity)
+            $ SM.insert "characterSpacing" (encode f.characterSpacing)
+            $ SM.insert "lineSpacing" (encode f.lineSpacing)
+            $ SM.insert "wrapBefore" (encode f.wrapBefore)
+            $ SM.insert "repeatWrapChar" (encode f.repeatWrapChar)
+            $ SM.insert "textTransform" (encode f.textTransform)
+            $ SM.insert "fill" (encode f.fill)
+            $ SM.insert "haloFill" (encode f.haloFill)
+            $ SM.insert "haloRadius" (encode f.haloRadius)
+            $ SM.insert "ffSettings" (encode f.ffSettings)
+            $ SM.insert "next" (encode f.next)
+            $ SM.empty
+  encode (FormatLayout f) = toForeign $ SM.insert "FormatLayout" o $ SM.empty
+    where o = toForeign
+            $ SM.insert "dx" (encode f.dx)
+            $ SM.insert "dy" (encode f.dy)
+            $ SM.insert "orientation" (encode f.orientation)
+            $ SM.insert "textRatio" (encode f.textRatio)
+            $ SM.insert "wrapWidth" (encode f.wrapWidth)
+            $ SM.insert "wrapChar" (encode f.wrapChar)
+            $ SM.insert "wrapBefore" (encode f.wrapBefore)
+            $ SM.insert "repeatWrapChar" (encode f.repeatWrapChar)
+            $ SM.insert "rotateDisplacement" (encode f.rotateDisplacement)
+            $ SM.insert "horizontalAlignment" (encode f.horizontalAlignment)
+            $ SM.insert "justifyAlignment" (encode f.justifyAlignment)
+            $ SM.insert "verticalAlignment" (encode f.verticalAlignment)
+            $ SM.insert "next" (encode f.next)
+            $ SM.empty
+  encode NullFormat = toForeign $ SM.insert "NullFormat" o $ SM.empty
+    where o = toForeign []
+
+instance decodeFormat :: Decode Format where
+  decode json = decode json >>= \ o ->
+    maybe invalid id (head (SM.toArrayWithKey go o))
+    where
+      go :: String -> Foreign -> F Format
+      go "NullFormat" _ = pure NullFormat
+      go "FormatList" xs =
+        FormatList <$> (traverse decode =<< decode xs)
+      go "Format" f = decode f >>= \ o -> do
+        font <- decodeMay (SM.lookup "font" o)
+        textSize <- decodeMay (SM.lookup "textSize" o)
+        opacity <- decodeMay (SM.lookup "opacity" o)
+        characterSpacing <- decodeMay (SM.lookup "characterSpacing" o)
+        lineSpacing <- decodeMay (SM.lookup "lineSpacing" o)
+        wrapBefore <- decodeMay (SM.lookup "wrapBefore" o)
+        repeatWrapChar <- decodeMay (SM.lookup "repeatWrapChar" o)
+        textTransform <- decodeMay (SM.lookup "textTransform" o)
+        fill <- decodeMay (SM.lookup "fill" o)
+        haloFill <- decodeMay (SM.lookup "haloFill" o)
+        haloRadius <- decodeMay (SM.lookup "haloRadius" o)
+        ffSettings <- decodeMay (SM.lookup "ffSettings" o)
+        next <- maybe error decode (SM.lookup "next" o)
+        pure (Format {font,textSize,opacity,characterSpacing,lineSpacing,wrapBefore,repeatWrapChar,textTransform,fill,haloFill,haloRadius,ffSettings,next})
+      go "FormatLayout" f = decode f >>= \ o -> do
+        dx <- decodeMay (SM.lookup "dx" o)
+        dy <- decodeMay (SM.lookup "dy" o)
+        orientation <- decodeMay (SM.lookup "orientation" o)
+        textRatio <- decodeMay (SM.lookup "textRatio" o)
+        wrapWidth <- decodeMay (SM.lookup "wrapWidth" o)
+        wrapChar <- decodeMay (SM.lookup "wrapChar" o)
+        wrapBefore <- decodeMay (SM.lookup "wrapBefore" o)
+        repeatWrapChar <- decodeMay (SM.lookup "repeatWrapChar" o)
+        rotateDisplacement <- decodeMay (SM.lookup "rotateDisplacement" o)
+        horizontalAlignment <- decodeMay (SM.lookup "horizontalAlignment" o)
+        justifyAlignment <- decodeMay (SM.lookup "justifyAlignment" o)
+        verticalAlignment <- decodeMay (SM.lookup "verticalAlignment" o)
+        next <- maybe error decode (SM.lookup "next" o)
+        pure (FormatLayout
+             {dx,dy,orientation,textRatio,wrapWidth,wrapBefore,wrapChar,repeatWrapChar,rotateDisplacement,horizontalAlignment,justifyAlignment,verticalAlignment,next})
+      go _ _ = invalid
+
+      error = throwError $ NEL.singleton $ ForeignError "Expected 'next' key"
+      invalid = throwError $ NEL.singleton $ ForeignError "Invalid Format"
+
+instance showFormat :: Show Format where
+  show (FormatExp e) = "FormatExp " <> show e
+  show (FormatList e) = "FormatList " <> show e
+  show (FormatList e) = "FormatList " <> show e
+  show (Format f) = "Format { "
+                 <> "font: " <> show f.font <> ", "
+                 <> "textSize: " <> show f.textSize <> ", "
+                 <> "opacity: " <> show f.opacity <> ", "
+                 <> "characterSpacing: " <> show f.characterSpacing <> ", "
+                 <> "lineSpacing: " <> show f.lineSpacing <> ", "
+                 <> "wrapBefore: " <> show f.wrapBefore <> ", "
+                 <> "repeatWrapChar: " <> show f.repeatWrapChar <> ", "
+                 <> "textTransform: " <> show f.textTransform <> ", "
+                 <> "fill: " <> show f.fill <> ", "
+                 <> "haloFill: " <> show f.haloFill <> ", "
+                 <> "ffSettings: " <> show f.ffSettings <> ", "
+                 <> "next: " <> show f.next <> "}"
+  show (FormatLayout f) = "FormatLayout { "
+                 <> "dx: " <> show f.dx <> ", "
+                 <> "dy: " <> show f.dy <> ", "
+                 <> "orientation: " <> show f.orientation <> ", "
+                 <> "textRatio: " <> show f.textRatio <> ", "
+                 <> "wrapWidth: " <> show f.wrapWidth <> ", "
+                 <> "wrapChar: " <> show f.wrapChar <> ", "
+                 <> "wrapBefore: " <> show f.wrapBefore <> ", "
+                 <> "repeatWrapChar: " <> show f.repeatWrapChar <> ", "
+                 <> "horizontalAlignment: " <> show f.horizontalAlignment <> ", "
+                 <> "justifyAlignment: " <> show f.justifyAlignment <> ", "
+                 <> "verticalAlignment: " <> show f.verticalAlignment <> ", "
+                 <> "next: " <> show f.next <> "}"
+  show NullFormat = "NullFormat"
+
+instance eqFormat :: Eq Format where
+  eq (FormatExp a) (FormatExp b) = eq a b
+  eq (FormatList a) (FormatList b) = eq a b
+  eq (Format a) (Format b) = eq a.font b.font
+                          && eq a.textSize b.textSize
+                          && eq a.opacity b.opacity
+                          && eq a.lineSpacing b.lineSpacing
+                          && eq a.wrapBefore b.wrapBefore
+                          && eq a.repeatWrapChar b.repeatWrapChar
+                          && eq a.textTransform b.textTransform
+                          && eq a.fill b.fill
+                          && eq a.haloFill b.haloFill
+                          && eq a.haloRadius b.haloRadius
+                          && eq a.ffSettings b.ffSettings
+                          && eq a.next b.next
+  eq (FormatLayout a) (FormatLayout b) = eq a.dx b.dx
+                                      && eq a.dy b.dy
+                                      && eq a.orientation b.orientation
+                                      && eq a.textRatio b.textRatio
+                                      && eq a.wrapWidth b.wrapWidth
+                                      && eq a.wrapChar b.wrapChar
+                                      && eq a.wrapBefore b.wrapBefore
+                                      && eq a.repeatWrapChar b.repeatWrapChar
+                                      && eq a.rotateDisplacement b.rotateDisplacement
+                                      && eq a.horizontalAlignment b.horizontalAlignment
+                                      && eq a.justifyAlignment b.justifyAlignment
+                                      && eq a.verticalAlignment b.verticalAlignment
+                                      && eq a.next b.next
+  eq NullFormat NullFormat = true
+  eq _ _ = false
 
 
 --------------------------------------------------------------------------------
Only in src.modified/Mapnik: .Symbolizer.purs.swp
